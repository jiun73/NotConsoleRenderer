new vector(AnimationX) animations
new vector(string) animation_names
new vector(string) paths
new int current_frame = 0
new int current_animation = 0
new int current_image = 0

new function :curanim = 
{
	animations -at current_animation
}

new function :curframe = 
{
	:curanim .frames -at current_frame
}

new init setup = { BASE .fit = false; }

new function :load_images = 
{
	vector(string) files = $file;
	int index = 0;

	$while { index < -size files } {
		files -at index :get_tex;
		paths -push {files -at index};
		index ++;
	};
}

new function :has_image = { paths -size > 0  }
new function :has_anim = { animations -size > 0 }
new function :animation_size =  { :curanim .frames -size }

new function :has_frames = 
{
	$if :has_anim  
	{
		return { :curanim .frames -size > 0 } 
	};
	:false;
}

new function :has_textures = 
{
	$if :has_anim 
	{
		return { :curanim .textures -size > 0 }
	};
	:false;
}

new function :add_frame =
{
	arg string path;
	arg* AnimationX anim;

	$if { @ anim .textures -has :get_tex path :not }
	{ 
		 @ anim .textures -push :get_tex path ;
	};

	int pos = { @ anim .textures -find :get_tex path };

	AnimationFrameX frame;

	frame .tex = (size_t) pos;
	frame .time = (u32) 100;

	@ anim .frames -push frame;
}

new function :set_origins_ratio = {
	arg double ratioY;
	arg double ratioX;

	int i = 0;

	$foreach { :curanim .frames }
	{
		V2d_i tex_size = { :curanim .textures -at (size_t-int) { :curanim .frames -at i .tex } :get_tex_sz };

		:curanim .frames -at i .origin .x = {tex_size .x (.) !* ratioX (~)};
		:curanim .frames -at i .origin .y = {tex_size .y (.) !* ratioY (~)};

		i ++;
	};
}

== # 30 <
	|| $ # 120 button { "Load images" } { :load_images } <>
	|| $ # 900 dropbox {paths} {current_image} <>
>

== # 30 $ <
	new bool makingAnim = false 

	|| # 140 if { :not makingAnim }	button	{"New Animation"}	{ makingAnim = :true } <>
	|| # 170 if { :not makingAnim } dropbox {animation_names} {current_animation} <>
	|| # 140 if { makingAnim }		textbox {"Enter name..."}	
	{ 
		arg* string text; 

		AnimationX new_anim;
		animation_names -push @ text;
		animations -push new_anim;

		:cout { "Added " @ text " animation" };

		makingAnim = :false; 
		@ text = ""; 
	} 
	<>
	|| $ # 140 if { makingAnim }		button	{"Cancel"}			{ makingAnim = :false } <>

	|| $ # 150 if { :has_anim :and :has_image } button { "Add frame" } 
			{
				& :curanim :add_frame { paths -at current_image} ;
			} <>

	|| $ # 150 if { :has_anim :and :has_image } button { "Add all images" } 
	{
		new int i;
		i = 0;
		$foreach paths 
		{
			& :curanim :add_frame { paths -at i };
			i ++;
		};
		
	} <>

	|| $ <
		== $ # 30 if { :has_frames } <
			|| # 70 text { current_frame " / " {:animation_size - 1} } <>

			|| # 40 button { "Prev" }  
			{
				$if {current_frame > 0} {current_frame --}
			} <>

			|| # 40 button { "Next" }  
			{
				$if {current_frame <  {:animation_size - 1} } 
				{current_frame ++}
			} <>
		>
	>
>

new bool state = false

== # 800 <
	|| $ # 4 if { :has_frames } FRAME_CREATOR { :curanim } { :curframe } <>


	|| # 1 if { :has_frames } 
	<
		== $ ANIMATION_PREVIEW { :curanim } <>
		== < || $ < 
			== # 30 text { "Size: " {:get_tex_sz { :curanim .textures -at (size_t-int) {:curframe .tex} } } } <>

			== # 30 textbox { "Origin: " :curframe .origin } { 
				arg* string text; 
				:curframe .origin #= @ text;
				@ text = ""; 
			} <> 

			== # 30 textbox { "Speed: " :curframe .time } { 
				arg* string text; 
				:curframe .time #= @ text;
				@ text  = ""; 
			} <>

			== # 30 if { :not state } button { "More... " } { state = :true; } <>
			== # 30 if { state } button { "Close" } { state = :false; } <>
			== # 30 if { state } button { "Copy settings to all frames" } 
			{
				int i = 0;
				$foreach { :curanim .frames }
				{
					:curanim .frames -at i .origin = { :curframe .origin } ;
					i ++;
				};
			} <>

			new double ZERO = 0
			new double HALF = 0.5
			new double ONE = 1

			== # 30 if { state }
			<
				|| button { "*" } { :set_origins_ratio ZERO ZERO } <>
				|| button { "*" } { :set_origins_ratio HALF ZERO } <>
				|| button { "*" } { :set_origins_ratio ONE ZERO } <>
			>

			== # 30 if { state }
			<
				|| button { "*" } { :set_origins_ratio ZERO HALF } <>
				|| button { "*" } { :set_origins_ratio HALF HALF } <>
				|| button { "*" } { :set_origins_ratio ONE HALF } <>
			>

			== # 30 if { state }
			<
				|| button { "*" } { :set_origins_ratio ZERO ONE } <>
				|| button { "*" } { :set_origins_ratio HALF ONE } <>
				|| button { "*" } { :set_origins_ratio ONE ONE } <>
			>
		>>

	>
>

