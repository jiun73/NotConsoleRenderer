#pragma once
#include "Shape_x.h"

inline Shape_x get_letter_shape(char c)
{
	switch (c)
	{
	case ' ':
		return { {} };
	case '0':
		return { {{{-5,0},{0,-5},{5,0}, {0,5}}} };
	case '1':
		return { {{0,-5},{0,5}} };
	case '2':
		return { {{-5,0},{0,-5},{5,0},{-5, 5}, 5, {-5, 5}, {5,0}, {0,-5}} };
	case '3':
		return { {{-5}, {5, -2.5}, {-5,0}, {5,2.5}, {-5,5}, {5,2.5}, {-5,0}, {5, -2.5} } };
	case '4':
		return { {5, {5, 0},{5,-5},{-5,0},{5,0}} };
	case '5':
		return { { {-5,5},{5,2.5}, {-5,0},-5, {5, -5}, -5, {-5,0},{5,2.5}} };
	case '6':
		return { { -5, {-5, 5}, 5, {-5, 0}} };
	case '7':
		return { {-5, {5, -5}, {-5,5},{5, -5}} };
	case '8':
		return { {{0,-5}, {-5,-2.5}, {5,2.5}, {0,5}, {-5, 2.5}, {5, -2.5}} };
	case '9':
		return { {5,{5,-5},-5, {5,0}} };
	case 'A':
		return { { {-2.5,0}, {-5,5},{0,-5},{5},{2.5,0}} };
	case 'a':
		return { {{0,-2.5},{-5, 1.25 }, {0,5}, {5,1.25},5} };
	case 'B':
		return { {{-5,5},{5,2.5},{-5,0},{5,-2.5},-5} };
	case 'b':
		return { {-5, {-5,5},{5,2.5},{-5,0}} };
	case 'C':
		return { {5,{-5,0},{5,-5},{-5,0}} };
	case 'c':
		return { {5, {-5,1.25}, {5,-2.5},{-5,1.25}} };
	case 'D':
		return { {-5,{-5,5},{5,0}} };
	case 'd':
		return { {{5,-5},5,{-5,2.5},{5,0}} };
	case 'E':
		return { {5,{-5,0},{5,-5},{-5,0},{5,0},{-5,0}} };
	case 'e':
		return { {5, {-5,1.25},{0,-2.5},{5,1.25}, {-5,1.25},5} };
	case 'F':
		return { {{ 5,-5},-5,{-5,0},{5,0},{-5,0},{-5,5},-5} };
	case 'f':
		return { {{5,-2.5},{-5,1.25},{5,1.25},{-5,1.25},{-5,5},{-5,1.25} } };
	case 'G':
		return { {{2.5,-2.5},{0,-5},{-5,0},{0,5},{5,0},0,{5,0}, {0,5}, {-5,0}, {0,-5}} };
	case 'g':
		return { {{{0,-2.5}, {5,-2.5},{0,-2.5},{5,1.25},{-5,6.25},{0,7.5},{5,6.25},{-5, 1.25}}} };
	case 'H':
		return { {{-5,{-5,5},{-5,0},{5,0},5,{5,-5},{5,0},{-5,0}}} };
	case 'h':
		return { {{-5,5},{-5,0},5,{-5,0},-5} };
	case 'I':
		return { {{-5,{5,-5},{0,-5},{0,5},5,{-5,5},{0,5},{0,-5}}} };
	case 'i':
		return { {{{-5, -2.5},{5,-2.5},{0,-2.5},{0,5},{5,5},{-5,5},{0,5},{0,-2.5}}} };
	case 'J':
		return { {{-5,0},{0,5},{5,0},{5,-5},{0,-5},{5,-5},{5,0},{0,5}} };
	case 'j':
		return { {{-2.5, -2.5}, {2.5,-2.5},{2.5,5},{0,7.5},{-2.5,5},{0,7.5},{2.5,5}, {2.5,-2.5}} };
	case 'K':
		return { {{-5,{-5,5},{-5,0},{5,-5},{-5,0},5, {-5,0}}} };
	case 'k':
		return { {{-5,{-5,5},{-5,1.25},{5,1.25},{-5,1.25},5, {-5,1.25}}} };
	case 'L':
		return { {-5, {-5,5},5,{-5,5}} };
	case 'l':
		return { {-5, {-5,5},{2.5,1.25},{-5,5}} };
	case 'M':
		return { {{-5,5},-5,{0,5},{5,-5},5,{5,-5},{0,5},-5} };
	case 'm':
		return { {{-5,5},{-5,-2.5},{0,1.25},{5,-2.5},5,{5,-2.5},{0,1.25},{-5,-2.5}} };
	case 'N':
		return { {{-5,5}, -5, 5,{5,-5}, 5, -5} };
	case 'n':
		return { {{-5, -2.5}, {-5,5},{5, -2.5},5,{5, -2.5}, {-5,5} } };
	case 'O':
		return { {{{-5,0},{0,-5},{5,0}, {0,5}}} };
	case 'o':
		return { {{{-5,1.25},{0,-2.5},{5,1.25}, {0,5}}} };
	case 'P':
		return { {-5, {5,-2.5}, {-5,0},{-5,5}} };
	case 'p':
		return { {{-5,-2.5}, {5,1.25}, {-5,2.5},{-5,7.5}} };
	case 'Q':
		return { {{-5,0},{0,5},2.5, 0, 5, 2.5, {5,0}, {0,-5}} };
	case 'q':
		return { {{5,1.25}, {0,-2.5},{-5,1.25},{0,5},{5,1.25},{5,-2.5},{5,7.5}} };
	case 'R':
		return { {{-5,5},{-5,0},5,{-5,0},{5,-2.5},-5} };
	case 'r':
		return { {{-5,5},{-5,-2.5},{ -5,0},{0,-2.5},{5,0},{0,-2.5},{-5,0} } };
	case 'S':
		return { {{-5,5},{5,2.5},{-5,-2.5},{5,-5},{-5,-2.5},{5,2.5}} };
	case 's':
		return { {{-5,5},{5,1.25},{-5,0},{5,-2.5},{-5,0},{5,1.25}} };
	case 'T':
		return { {-5,{5,-5},{0,-5},{0,5},{0,-5}} };
	case 't':
		return { {{-5, -2.5},{5,-2.5},{0,-2.5},{0,5},{0,-2.5}} };
	case 'U':
		return { {-5, {-5,5},5,{5,-5},5,{-5,5}} };
	case 'u':
		return { {{-5,-2.5}, {-5,5},5,{5,-2.5},5,{-5,5}} };
	case 'V':
		return { { -5, {0,5},{5,-5},{0,5}} };
	case 'v':
		return { { {-5,-2.5}, {0,5},{5,-2.5},{0,5}} };
	case 'W':
		return { {{5,-5},5,{0,-5},{-5,5},-5,{-5,5},{0,-5},5} };
	case 'w':
		return { {{5,-2.5},5,{0,1.25},{-5,5},{-5,-2.5},{-5,5},{0,1.25},5} };
	case 'X':
		return { {-5, 5, 0, {-5,5}, 0 , {5,-5}, 0} };
	case 'x':
		return { {{-5,-2.5}, {0,1.25}, 5, {0,1.25}, {-5,5}, {0,1.25} , {5,-2.5}, {0,1.25}} };
	case 'Y':
		return { {-5, 0, {5,-5}, {-5,5},0} };
	case 'y':
		return { {{-5,-2.5}, {0,1.25}, {5,-2.5}, {-5,5},{0,1.25}} };
	case 'Z':
		return { {{-5, {5,-5}, {-5,5},5, {-5,5}, {5,-5}}} };
	case 'z':
		return { {{{-5,-2.5}, {5,-2.5}, {-5,5},5, {-5,5}, {5,-2.5}}} };
	default:
		return {};
	}
}

void apply_shape(Shape_x& shape, function<void(V2d_d&, size_t)> transform)
{
	size_t i = 0;
	for (auto& p : shape.get_points())
	{
		transform(p, i);
		i++;
	}
}

void distort_shape(Shape_x& shape, double force = 5)
{
	apply_shape(shape, [&](V2d_d& point, size_t)
		{
			point += {random().frange(-force, force), random().frange(-force, force)};;
		});
}

void wave_shape(Shape_x& shape, double amplitude = 5)
{
	apply_shape(shape, [&](V2d_d& point, size_t i)
		{
			point += {sin((SDL_GetTicks() / 100.0) + i * 5)* amplitude, cos((SDL_GetTicks() / 100.0) + i * 5)* amplitude};;
		});
}

void draw_letter(char c, V2d_i pos, double scale = 1)
{
	Shape_x shape = get_letter_shape(c);

	shape.position = pos;
	shape.scale = scale;

	shape.draw();
}

void draw_text(string s, V2d_i pos, double scale = 1)
{
	int basex = pos.x;
	for (auto& c : s)
	{
		if (c == '\n')
		{
			pos.x = basex;
			pos.y += 12 * scale;
			continue;
		}

		draw_letter(c, pos + 5 * scale, scale);
		pos.x += 12 * scale;
	}
}
